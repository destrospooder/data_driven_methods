# 2024SP Project: Population Dynamics

For my final project, I implemented the SINDyC algorithm to identify the governing eqquations of a modified Lotka-Volterra predator-prey model with an external forcing term that artificially inflates the prey population. I then implemented a Model Predictive Control (MPC) strategy to control the system, using the equations identified by the SINDy algorithm.

$$
\dot{x}_1 = \alpha x_1 - \beta x_1 x_2 \\$$ $$
\dot{x}_2 = -\gamma x_2 + \delta x_1 x_2 + F(t)
$$

where $\alpha$ represents the max prey per capita growth rate, $\beta$ represents the effect of the presence of predators on the prey death rate, $\gamma$ represents the predator per capita death rate, and $\delta$ represents the effect of the presence of prey on predator birth rate.

Time-series data for the prey and predator population are generated by numerically solving the equations for a specified input. Options are provided to add Gaussian noise to the data and visualize the noisy and noiseles time-series.

Next, the SINDyC algorithm is set up using the [PySINDy](https://pysindy.readthedocs.io/en/latest/) library. The algorithm is configured with a finite difference differentiation method, a polunomial feature library of degree 2, and a sequential thresholded least-squares optimizer. The governing equations are represented as sparse coefficients for the candidate library functions.

The MPC controller is configured using the [do_mpc](https://www.do-mpc.com/en/latest/) library. The state variables are the prey and predator populations, and the control input is an unspecified external action.

The objective function for the MPC controller is defined as minimizing the sum of squared population rates of prey and predators, effectively aiming to stabilize the populations of both species. The MPC controller and a simulator are initialized with the same initial conditions for the prey and predator populations. A simulation loop is run for 20 time steps, where the MPC controller computes the optimal control input at each step, and the simulator updates the system state based on the control input.

Figures can be found on my repository.